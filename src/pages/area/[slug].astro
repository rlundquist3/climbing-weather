---
import PastWeatherDay from "../../components/PastWeatherDay.astro";
import {
  PastWeatherDayData,
  ForecastData,
} from "../../util/weather-data-types";
import Layout from "../../layouts/Layout.astro";
import CurrentWeather from "../../components/CurrentWeather.astro";
import Forecast from "../../components/Forecast.astro";
import { mmToIn } from "../../util/mappers";
import Data from "../../components/Data.astro";
import { Area } from "../../util/areas";

export const prerender = false;

const { slug } = Astro.params;
const queryString = Astro.url.search;

const response = await fetch(
  // @ts-ignore
  `${import.meta.env.PUBLIC_API_URL}/api/${slug}.json${queryString}`
);
const {
  area,
  pastWeather,
  forecast,
}: { area: Area; pastWeather: PastWeatherDayData[]; forecast: ForecastData } =
  await response.json();

// TODO: error handling here

const totalPrecip = mmToIn(
  pastWeather.reduce((acc, day) => acc + day.precipitation.total ?? 0, 0)
);
---

<Layout>
  <h1>Weather for: <Data>{area.name}</Data></h1>
  <h3>Past 3 Days</h3>
  <strong>total precipitation:</strong>
  <Data>{totalPrecip}"</Data>
  <div class="past-weather-container">
    {pastWeather.map((day) => <PastWeatherDay data={day} />)}
  </div>
  <hr />
  <CurrentWeather data={forecast.current} />
  <hr />
  <Forecast hourly={forecast.hourly} daily={forecast.daily} />
</Layout>

<style lang="scss">
  .past-weather-container {
    display: flex;
    flex-direction: row;
  }
</style>
