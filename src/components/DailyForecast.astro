---
import type {
  DailyForecastItem,
  ForecastData,
} from "../util/weather-data-types";
import { getWeatherImage, mmToIn, weatherImageMap } from "../util/mappers";
import { DateTime } from "luxon";
import {
  ChancePrecip,
  CloudCover,
  DataContainer,
  Humidity,
  Precipitation,
  TemperatureTable,
  TextData,
  Thermometer,
  UVIndex,
  Wind,
} from "./data";

type Props = {
  data: DailyForecastItem;
  timezone: ForecastData["timezone"];
  label?: string;
};

const { data, timezone, label } = Astro.props;
const time = DateTime.fromSeconds(data.dt, { zone: timezone }).toLocaleString(
  DateTime.DATE_MED_WITH_WEEKDAY
);
const weatherImage: string | undefined = getWeatherImage(data);

const orderedTemperatureKeys: (keyof DailyForecastItem["temp"])[] = [
  "min",
  "max",
  "morn",
  "day",
  "eve",
  "night",
];

const tempKeyMap: {
  [Property in keyof DailyForecastItem["temp"]]: {
    type: "low" | "high" | "current" | "dew point";
    label: string;
  };
} = {
  min: { type: "low", label: "low" },
  max: { type: "high", label: "high" },
  morn: { type: "current", label: "morning" },
  day: { type: "current", label: "afternoon" },
  eve: { type: "current", label: "evening" },
  night: { type: "current", label: "night" },
};
---

<div class="daily-forecast-item">
  <div class="header">
    <div>
      <h3>
        <time datetime={time}
          >{label ?? time.split(",").slice(0, -1).join(",")}:</time
        >
      </h3>
      <h4><TextData>{data.weather[0].description}</TextData></h4>
    </div>
    {
      weatherImage && (
        <img src={weatherImage} alt={data.weather[0].description} />
      )
    }
  </div>

  <DataContainer>
    {
      orderedTemperatureKeys
        .slice(0, 2)
        .map((key) => (
          <Thermometer
            value={data.temp[key]}
            feelsLike={data.feels_like[key]}
            type={tempKeyMap[key].type}
            label={tempKeyMap[key].label}
          />
        ))
    }
    <TemperatureTable
      entries={orderedTemperatureKeys.slice(2).map((key) => ({
        label: tempKeyMap[key].label,
        value: data.temp[key],
        feelsLike: data.feels_like[key],
      }))}
    />
    {isFinite(data.pop) && <ChancePrecip value={data.pop} />}
    {
      isFinite(data.rain) && (
        <Precipitation label="rain" value={mmToIn(data.rain)} />
      )
    }
    {
      isFinite(data.snow) && (
        <Precipitation label="snow" value={mmToIn(data.snow)} />
      )
    }
    <Humidity value={data.humidity} } />
    <Thermometer value={data.dew_point} type="dew point" />
    <UVIndex value={data.uvi} />
    <Wind direction={data.wind_deg} speed={data.wind_speed} />
    <CloudCover value={data.clouds} />
  </DataContainer>
</div>

<style lang="scss">
  .daily-forecast-item {
    border-radius: 8px;
    box-shadow: 4px 4px 12px #000000;
    margin: 0.5rem;
    max-height: calc(100% - 2rem);
    padding: 0 1rem 1rem;
  }
  .header {
    display: flex;
    justify-content: space-between;
  }
  h3 {
    margin-bottom: 0;
  }
  h4 {
    margin-top: 0;
  }
</style>
