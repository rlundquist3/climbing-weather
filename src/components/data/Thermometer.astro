---
import isFinite from "lodash/isFinite";
import TextData from "./TextData.astro";

type Props = {
  value: number;
  type: "low" | "high" | "current" | "dew point";
  label?: string;
  feelsLike?: number;
};
const { value, type, feelsLike, label } = Astro.props;
---

<div class="container" style={isFinite(feelsLike) ? { width: "unset" } : {}}>
  <meter
    class={type}
    min="0"
    max="120"
    high="80"
    optimum="55"
    value={value}
    title="degrees Farenheit"></meter>
  <div>
    {
      type !== "current" ? (
        <label>{label ?? type}:</label>
      ) : type === "current" && !!label ? (
        <label>{label}:</label>
      ) : null
    }<br />
    <TextData>{value.toFixed(0)}°F</TextData>
    {
      isFinite(feelsLike) && (
        <>
          <br />
          <span style={{ fontSize: "0.75rem" }}>
            (feels like:
            <TextData style={{ fontSize: "0.75rem" }}>
              {feelsLike?.toFixed(0)}°F
            </TextData>
            )
          </span>
        </>
      )
    }
  </div>
</div>

<style>
  div.container {
    align-items: flex-end;
    display: flex;
    flex-direction: row;
    width: 100px;
  }
  label {
    font-size: 0.75rem;
  }
  meter {
    transform: rotate(-90deg) translate(20px, 14px);
    width: 50px;
  }
  meter.low::-webkit-meter-optimum-value {
    background: #08bdff;
  }
  meter.high::-webkit-meter-optimum-value {
    background: #fc6a0f;
  }
</style>
